//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ComponentArt.Win.Demos.ManualTreeViewFileExplorerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyTreeViewNodeData", Namespace="http://schemas.datacontract.org/2004/07/ComponentArt.Win.Demos.Web")]
    [System.SerializableAttribute()]
    public partial class MyTreeViewNodeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeaderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IconSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsExpandedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLoadOnDemandEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[] NodesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Header {
            get {
                return this.HeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.HeaderField, value) != true)) {
                    this.HeaderField = value;
                    this.RaisePropertyChanged("Header");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IconSource {
            get {
                return this.IconSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.IconSourceField, value) != true)) {
                    this.IconSourceField = value;
                    this.RaisePropertyChanged("IconSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLoadOnDemandEnabled {
            get {
                return this.IsLoadOnDemandEnabledField;
            }
            set {
                if ((this.IsLoadOnDemandEnabledField.Equals(value) != true)) {
                    this.IsLoadOnDemandEnabledField = value;
                    this.RaisePropertyChanged("IsLoadOnDemandEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[] Nodes {
            get {
                return this.NodesField;
            }
            set {
                if ((object.ReferenceEquals(this.NodesField, value) != true)) {
                    this.NodesField = value;
                    this.RaisePropertyChanged("Nodes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService")]
    public interface ManualTreeViewFileExplorerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManualTreeViewFileExplorerService/GetNodes", ReplyAction="urn:ManualTreeViewFileExplorerService/GetNodesResponse")]
        ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[] GetNodes(string parentNodePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ManualTreeViewFileExplorerService/GetNodes", ReplyAction="urn:ManualTreeViewFileExplorerService/GetNodesResponse")]
        System.IAsyncResult BeginGetNodes(string parentNodePath, System.AsyncCallback callback, object asyncState);
        
        ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[] EndGetNodes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ManualTreeViewFileExplorerServiceChannel : ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ManualTreeViewFileExplorerServiceClient : System.ServiceModel.ClientBase<ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService>, ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService {
        
        private BeginOperationDelegate onBeginGetNodesDelegate;
        
        private EndOperationDelegate onEndGetNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodesCompletedDelegate;
        
        public ManualTreeViewFileExplorerServiceClient() {
        }
        
        public ManualTreeViewFileExplorerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManualTreeViewFileExplorerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManualTreeViewFileExplorerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManualTreeViewFileExplorerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetNodesCompletedEventArgs> GetNodesCompleted;
        
        public ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[] GetNodes(string parentNodePath) {
            return base.Channel.GetNodes(parentNodePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNodes(string parentNodePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodes(parentNodePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[] EndGetNodes(System.IAsyncResult result) {
            return base.Channel.EndGetNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string parentNodePath = ((string)(inValues[0]));
            return this.BeginGetNodes(parentNodePath, callback, asyncState);
        }
        
        private object[] OnEndGetNodes(System.IAsyncResult result) {
            ComponentArt.Win.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData[] retVal = this.EndGetNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodesCompleted(object state) {
            if ((this.GetNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodesCompleted(this, new GetNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodesAsync(string parentNodePath) {
            this.GetNodesAsync(parentNodePath, null);
        }
        
        public void GetNodesAsync(string parentNodePath, object userState) {
            if ((this.onBeginGetNodesDelegate == null)) {
                this.onBeginGetNodesDelegate = new BeginOperationDelegate(this.OnBeginGetNodes);
            }
            if ((this.onEndGetNodesDelegate == null)) {
                this.onEndGetNodesDelegate = new EndOperationDelegate(this.OnEndGetNodes);
            }
            if ((this.onGetNodesCompletedDelegate == null)) {
                this.onGetNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodesDelegate, new object[] {
                        parentNodePath}, this.onEndGetNodesDelegate, this.onGetNodesCompletedDelegate, userState);
        }
    }
}
