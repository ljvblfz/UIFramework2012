//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ComponentArt.Win.Demos.ManualNavBarService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyNavBarData", Namespace="http://schemas.datacontract.org/2004/07/ComponentArt.Win.Demos.Web")]
    [System.SerializableAttribute()]
    public partial class MyNavBarData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeaderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IconSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLoadOnDemandEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSelectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[] ItemsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Header {
            get {
                return this.HeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.HeaderField, value) != true)) {
                    this.HeaderField = value;
                    this.RaisePropertyChanged("Header");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IconSource {
            get {
                return this.IconSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.IconSourceField, value) != true)) {
                    this.IconSourceField = value;
                    this.RaisePropertyChanged("IconSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLoadOnDemandEnabled {
            get {
                return this.IsLoadOnDemandEnabledField;
            }
            set {
                if ((this.IsLoadOnDemandEnabledField.Equals(value) != true)) {
                    this.IsLoadOnDemandEnabledField = value;
                    this.RaisePropertyChanged("IsLoadOnDemandEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSelected {
            get {
                return this.IsSelectedField;
            }
            set {
                if ((this.IsSelectedField.Equals(value) != true)) {
                    this.IsSelectedField = value;
                    this.RaisePropertyChanged("IsSelected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ManualNavBarService.ManualNavBarService")]
    public interface ManualNavBarService {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManualNavBarService/GetItems", ReplyAction="urn:ManualNavBarService/GetItemsResponse")]
        ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[] GetItems(string parentGroup);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ManualNavBarService/GetItems", ReplyAction="urn:ManualNavBarService/GetItemsResponse")]
        System.IAsyncResult BeginGetItems(string parentGroup, System.AsyncCallback callback, object asyncState);
        
        ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[] EndGetItems(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ManualNavBarServiceChannel : ComponentArt.Win.Demos.ManualNavBarService.ManualNavBarService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ManualNavBarServiceClient : System.ServiceModel.ClientBase<ComponentArt.Win.Demos.ManualNavBarService.ManualNavBarService>, ComponentArt.Win.Demos.ManualNavBarService.ManualNavBarService {
        
        private BeginOperationDelegate onBeginGetItemsDelegate;
        
        private EndOperationDelegate onEndGetItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetItemsCompletedDelegate;
        
        public ManualNavBarServiceClient() {
        }
        
        public ManualNavBarServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManualNavBarServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManualNavBarServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManualNavBarServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetItemsCompletedEventArgs> GetItemsCompleted;
        
        public ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[] GetItems(string parentGroup) {
            return base.Channel.GetItems(parentGroup);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetItems(string parentGroup, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetItems(parentGroup, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[] EndGetItems(System.IAsyncResult result) {
            return base.Channel.EndGetItems(result);
        }
        
        private System.IAsyncResult OnBeginGetItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string parentGroup = ((string)(inValues[0]));
            return this.BeginGetItems(parentGroup, callback, asyncState);
        }
        
        private object[] OnEndGetItems(System.IAsyncResult result) {
            ComponentArt.Win.Demos.ManualNavBarService.MyNavBarData[] retVal = this.EndGetItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetItemsCompleted(object state) {
            if ((this.GetItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetItemsCompleted(this, new GetItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetItemsAsync(string parentGroup) {
            this.GetItemsAsync(parentGroup, null);
        }
        
        public void GetItemsAsync(string parentGroup, object userState) {
            if ((this.onBeginGetItemsDelegate == null)) {
                this.onBeginGetItemsDelegate = new BeginOperationDelegate(this.OnBeginGetItems);
            }
            if ((this.onEndGetItemsDelegate == null)) {
                this.onEndGetItemsDelegate = new EndOperationDelegate(this.OnEndGetItems);
            }
            if ((this.onGetItemsCompletedDelegate == null)) {
                this.onGetItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetItemsDelegate, new object[] {
                        parentGroup}, this.onEndGetItemsDelegate, this.onGetItemsCompletedDelegate, userState);
        }
    }
}
