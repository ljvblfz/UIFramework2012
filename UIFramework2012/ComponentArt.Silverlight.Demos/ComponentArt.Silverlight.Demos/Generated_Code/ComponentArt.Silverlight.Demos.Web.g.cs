//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ComponentArt.Silverlight.Demos
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace ComponentArt.Silverlight.Demos.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The 'Posts' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ComponentArt.Silverlight.Demos.Web")]
    public sealed partial class Posts : Entity
    {
        
        private string _attachmentIcon;
        
        private string _emailIcon;
        
        private string _emailIconLarge;
        
        private string _flagIcon;
        
        private string _icon;
        
        private string _lastPostBy;
        
        private DateTime _lastPostDate;
        
        private int _postID;
        
        private string _priorityIcon;
        
        private int _replies;
        
        private string _startedBy;
        
        private string _subject;
        
        private int _totalViews;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttachmentIconChanging(string value);
        partial void OnAttachmentIconChanged();
        partial void OnEmailIconChanging(string value);
        partial void OnEmailIconChanged();
        partial void OnEmailIconLargeChanging(string value);
        partial void OnEmailIconLargeChanged();
        partial void OnFlagIconChanging(string value);
        partial void OnFlagIconChanged();
        partial void OnIconChanging(string value);
        partial void OnIconChanged();
        partial void OnLastPostByChanging(string value);
        partial void OnLastPostByChanged();
        partial void OnLastPostDateChanging(DateTime value);
        partial void OnLastPostDateChanged();
        partial void OnPostIDChanging(int value);
        partial void OnPostIDChanged();
        partial void OnPriorityIconChanging(string value);
        partial void OnPriorityIconChanged();
        partial void OnRepliesChanging(int value);
        partial void OnRepliesChanged();
        partial void OnStartedByChanging(string value);
        partial void OnStartedByChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnTotalViewsChanging(int value);
        partial void OnTotalViewsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Posts"/> class.
        /// </summary>
        public Posts()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AttachmentIcon' value.
        /// </summary>
        [DataMember()]
        public string AttachmentIcon
        {
            get
            {
                return this._attachmentIcon;
            }
            set
            {
                if ((this._attachmentIcon != value))
                {
                    this.OnAttachmentIconChanging(value);
                    this.RaiseDataMemberChanging("AttachmentIcon");
                    this.ValidateProperty("AttachmentIcon", value);
                    this._attachmentIcon = value;
                    this.RaiseDataMemberChanged("AttachmentIcon");
                    this.OnAttachmentIconChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailIcon' value.
        /// </summary>
        [DataMember()]
        public string EmailIcon
        {
            get
            {
                return this._emailIcon;
            }
            set
            {
                if ((this._emailIcon != value))
                {
                    this.OnEmailIconChanging(value);
                    this.RaiseDataMemberChanging("EmailIcon");
                    this.ValidateProperty("EmailIcon", value);
                    this._emailIcon = value;
                    this.RaiseDataMemberChanged("EmailIcon");
                    this.OnEmailIconChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailIconLarge' value.
        /// </summary>
        [DataMember()]
        public string EmailIconLarge
        {
            get
            {
                return this._emailIconLarge;
            }
            set
            {
                if ((this._emailIconLarge != value))
                {
                    this.OnEmailIconLargeChanging(value);
                    this.RaiseDataMemberChanging("EmailIconLarge");
                    this.ValidateProperty("EmailIconLarge", value);
                    this._emailIconLarge = value;
                    this.RaiseDataMemberChanged("EmailIconLarge");
                    this.OnEmailIconLargeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FlagIcon' value.
        /// </summary>
        [DataMember()]
        public string FlagIcon
        {
            get
            {
                return this._flagIcon;
            }
            set
            {
                if ((this._flagIcon != value))
                {
                    this.OnFlagIconChanging(value);
                    this.RaiseDataMemberChanging("FlagIcon");
                    this.ValidateProperty("FlagIcon", value);
                    this._flagIcon = value;
                    this.RaiseDataMemberChanged("FlagIcon");
                    this.OnFlagIconChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Icon' value.
        /// </summary>
        [DataMember()]
        public string Icon
        {
            get
            {
                return this._icon;
            }
            set
            {
                if ((this._icon != value))
                {
                    this.OnIconChanging(value);
                    this.RaiseDataMemberChanging("Icon");
                    this.ValidateProperty("Icon", value);
                    this._icon = value;
                    this.RaiseDataMemberChanged("Icon");
                    this.OnIconChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastPostBy' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LastPostBy
        {
            get
            {
                return this._lastPostBy;
            }
            set
            {
                if ((this._lastPostBy != value))
                {
                    this.OnLastPostByChanging(value);
                    this.RaiseDataMemberChanging("LastPostBy");
                    this.ValidateProperty("LastPostBy", value);
                    this._lastPostBy = value;
                    this.RaiseDataMemberChanged("LastPostBy");
                    this.OnLastPostByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastPostDate' value.
        /// </summary>
        [DataMember()]
        public DateTime LastPostDate
        {
            get
            {
                return this._lastPostDate;
            }
            set
            {
                if ((this._lastPostDate != value))
                {
                    this.OnLastPostDateChanging(value);
                    this.RaiseDataMemberChanging("LastPostDate");
                    this.ValidateProperty("LastPostDate", value);
                    this._lastPostDate = value;
                    this.RaiseDataMemberChanged("LastPostDate");
                    this.OnLastPostDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PostID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PostID
        {
            get
            {
                return this._postID;
            }
            set
            {
                if ((this._postID != value))
                {
                    this.OnPostIDChanging(value);
                    this.ValidateProperty("PostID", value);
                    this._postID = value;
                    this.RaisePropertyChanged("PostID");
                    this.OnPostIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PriorityIcon' value.
        /// </summary>
        [DataMember()]
        public string PriorityIcon
        {
            get
            {
                return this._priorityIcon;
            }
            set
            {
                if ((this._priorityIcon != value))
                {
                    this.OnPriorityIconChanging(value);
                    this.RaiseDataMemberChanging("PriorityIcon");
                    this.ValidateProperty("PriorityIcon", value);
                    this._priorityIcon = value;
                    this.RaiseDataMemberChanged("PriorityIcon");
                    this.OnPriorityIconChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Replies' value.
        /// </summary>
        [DataMember()]
        public int Replies
        {
            get
            {
                return this._replies;
            }
            set
            {
                if ((this._replies != value))
                {
                    this.OnRepliesChanging(value);
                    this.RaiseDataMemberChanging("Replies");
                    this.ValidateProperty("Replies", value);
                    this._replies = value;
                    this.RaiseDataMemberChanged("Replies");
                    this.OnRepliesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartedBy' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string StartedBy
        {
            get
            {
                return this._startedBy;
            }
            set
            {
                if ((this._startedBy != value))
                {
                    this.OnStartedByChanging(value);
                    this.RaiseDataMemberChanging("StartedBy");
                    this.ValidateProperty("StartedBy", value);
                    this._startedBy = value;
                    this.RaiseDataMemberChanged("StartedBy");
                    this.OnStartedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Subject' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Subject
        {
            get
            {
                return this._subject;
            }
            set
            {
                if ((this._subject != value))
                {
                    this.OnSubjectChanging(value);
                    this.RaiseDataMemberChanging("Subject");
                    this.ValidateProperty("Subject", value);
                    this._subject = value;
                    this.RaiseDataMemberChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalViews' value.
        /// </summary>
        [DataMember()]
        public int TotalViews
        {
            get
            {
                return this._totalViews;
            }
            set
            {
                if ((this._totalViews != value))
                {
                    this.OnTotalViewsChanging(value);
                    this.RaiseDataMemberChanging("TotalViews");
                    this.ValidateProperty("TotalViews", value);
                    this._totalViews = value;
                    this.RaiseDataMemberChanged("TotalViews");
                    this.OnTotalViewsChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._postID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'PostsDomainService' domain service.
    /// </summary>
    public sealed partial class PostsDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PostsDomainContext"/> class.
        /// </summary>
        public PostsDomainContext() : 
                this(new WebDomainClient<IPostsDomainServiceContract>(new Uri("ComponentArt-Silverlight-Demos-Web-PostsDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PostsDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PostsDomainService service URI.</param>
        public PostsDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IPostsDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PostsDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public PostsDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Posts"/> entities that have been loaded into this <see cref="PostsDomainContext"/> instance.
        /// </summary>
        public EntitySet<Posts> Posts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Posts>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Posts"/> entities using the 'GetPosts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Posts"/> entities.</returns>
        public EntityQuery<Posts> GetPostsQuery()
        {
            this.ValidateMethod("GetPostsQuery", null);
            return base.CreateQuery<Posts>("GetPosts", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PostsDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PostsDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IPostsDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPosts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PostsDomainService/GetPostsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PostsDomainService/GetPosts", ReplyAction="http://tempuri.org/PostsDomainService/GetPostsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPosts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPosts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPosts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPosts' operation.</returns>
            QueryResult<Posts> EndGetPosts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PostsDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PostsDomainService/SubmitChanges", ReplyAction="http://tempuri.org/PostsDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PostsDomainContextEntityContainer : EntityContainer
        {
            
            public PostsDomainContextEntityContainer()
            {
                this.CreateEntitySet<Posts>(EntitySetOperations.None);
            }
        }
    }
}
