//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyTreeViewNodeData", Namespace="http://schemas.datacontract.org/2004/07/ComponentArt.Silverlight.Demos.Web")]
    public partial class MyTreeViewNodeData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string HeaderField;
        
        private string IconSourceField;
        
        private string IdField;
        
        private bool IsExpandedField;
        
        private bool IsLoadOnDemandEnabledField;
        
        private System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData> NodesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Header {
            get {
                return this.HeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.HeaderField, value) != true)) {
                    this.HeaderField = value;
                    this.RaisePropertyChanged("Header");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IconSource {
            get {
                return this.IconSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.IconSourceField, value) != true)) {
                    this.IconSourceField = value;
                    this.RaisePropertyChanged("IconSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExpanded {
            get {
                return this.IsExpandedField;
            }
            set {
                if ((this.IsExpandedField.Equals(value) != true)) {
                    this.IsExpandedField = value;
                    this.RaisePropertyChanged("IsExpanded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLoadOnDemandEnabled {
            get {
                return this.IsLoadOnDemandEnabledField;
            }
            set {
                if ((this.IsLoadOnDemandEnabledField.Equals(value) != true)) {
                    this.IsLoadOnDemandEnabledField = value;
                    this.RaisePropertyChanged("IsLoadOnDemandEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData> Nodes {
            get {
                return this.NodesField;
            }
            set {
                if ((object.ReferenceEquals(this.NodesField, value) != true)) {
                    this.NodesField = value;
                    this.RaisePropertyChanged("Nodes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService")]
    public interface ManualTreeViewFileExplorerService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ManualTreeViewFileExplorerService/GetNodes", ReplyAction="urn:ManualTreeViewFileExplorerService/GetNodesResponse")]
        System.IAsyncResult BeginGetNodes(string parentNodePath, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData> EndGetNodes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ManualTreeViewFileExplorerServiceChannel : ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ManualTreeViewFileExplorerServiceClient : System.ServiceModel.ClientBase<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService>, ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService {
        
        private BeginOperationDelegate onBeginGetNodesDelegate;
        
        private EndOperationDelegate onEndGetNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ManualTreeViewFileExplorerServiceClient() {
        }
        
        public ManualTreeViewFileExplorerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManualTreeViewFileExplorerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManualTreeViewFileExplorerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManualTreeViewFileExplorerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetNodesCompletedEventArgs> GetNodesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService.BeginGetNodes(string parentNodePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodes(parentNodePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData> ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService.EndGetNodes(System.IAsyncResult result) {
            return base.Channel.EndGetNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string parentNodePath = ((string)(inValues[0]));
            return ((ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService)(this)).BeginGetNodes(parentNodePath, callback, asyncState);
        }
        
        private object[] OnEndGetNodes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData> retVal = ((ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService)(this)).EndGetNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodesCompleted(object state) {
            if ((this.GetNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodesCompleted(this, new GetNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodesAsync(string parentNodePath) {
            this.GetNodesAsync(parentNodePath, null);
        }
        
        public void GetNodesAsync(string parentNodePath, object userState) {
            if ((this.onBeginGetNodesDelegate == null)) {
                this.onBeginGetNodesDelegate = new BeginOperationDelegate(this.OnBeginGetNodes);
            }
            if ((this.onEndGetNodesDelegate == null)) {
                this.onEndGetNodesDelegate = new EndOperationDelegate(this.OnEndGetNodes);
            }
            if ((this.onGetNodesCompletedDelegate == null)) {
                this.onGetNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodesDelegate, new object[] {
                        parentNodePath}, this.onEndGetNodesDelegate, this.onGetNodesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService CreateChannel() {
            return new ManualTreeViewFileExplorerServiceClientChannel(this);
        }
        
        private class ManualTreeViewFileExplorerServiceClientChannel : ChannelBase<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService>, ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService {
            
            public ManualTreeViewFileExplorerServiceClientChannel(System.ServiceModel.ClientBase<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.ManualTreeViewFileExplorerService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetNodes(string parentNodePath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = parentNodePath;
                System.IAsyncResult _result = base.BeginInvoke("GetNodes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData> EndGetNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData> _result = ((System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.ManualTreeViewFileExplorerService.MyTreeViewNodeData>)(base.EndInvoke("GetNodes", _args, result)));
                return _result;
            }
        }
    }
}
