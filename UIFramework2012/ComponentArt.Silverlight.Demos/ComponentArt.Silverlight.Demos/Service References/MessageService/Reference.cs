//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace ComponentArt.Silverlight.Demos.MessageService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/ComponentArt.Silverlight.Demos.Web")]
    public partial class Message : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AttachmentIconField;
        
        private string EmailIconField;
        
        private string FlagIconField;
        
        private string LargeEmailIconField;
        
        private System.DateTime LastPostDateField;
        
        private string PriorityIconField;
        
        private int RepliesField;
        
        private string StartedByField;
        
        private string SubjectField;
        
        private int TotalViewsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttachmentIcon {
            get {
                return this.AttachmentIconField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentIconField, value) != true)) {
                    this.AttachmentIconField = value;
                    this.RaisePropertyChanged("AttachmentIcon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailIcon {
            get {
                return this.EmailIconField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIconField, value) != true)) {
                    this.EmailIconField = value;
                    this.RaisePropertyChanged("EmailIcon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlagIcon {
            get {
                return this.FlagIconField;
            }
            set {
                if ((object.ReferenceEquals(this.FlagIconField, value) != true)) {
                    this.FlagIconField = value;
                    this.RaisePropertyChanged("FlagIcon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LargeEmailIcon {
            get {
                return this.LargeEmailIconField;
            }
            set {
                if ((object.ReferenceEquals(this.LargeEmailIconField, value) != true)) {
                    this.LargeEmailIconField = value;
                    this.RaisePropertyChanged("LargeEmailIcon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastPostDate {
            get {
                return this.LastPostDateField;
            }
            set {
                if ((this.LastPostDateField.Equals(value) != true)) {
                    this.LastPostDateField = value;
                    this.RaisePropertyChanged("LastPostDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityIcon {
            get {
                return this.PriorityIconField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityIconField, value) != true)) {
                    this.PriorityIconField = value;
                    this.RaisePropertyChanged("PriorityIcon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Replies {
            get {
                return this.RepliesField;
            }
            set {
                if ((this.RepliesField.Equals(value) != true)) {
                    this.RepliesField = value;
                    this.RaisePropertyChanged("Replies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StartedBy {
            get {
                return this.StartedByField;
            }
            set {
                if ((object.ReferenceEquals(this.StartedByField, value) != true)) {
                    this.StartedByField = value;
                    this.RaisePropertyChanged("StartedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalViews {
            get {
                return this.TotalViewsField;
            }
            set {
                if ((this.TotalViewsField.Equals(value) != true)) {
                    this.TotalViewsField = value;
                    this.RaisePropertyChanged("TotalViews");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.WCFMessageService")]
    public interface WCFMessageService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/WCFMessageService/GetRecords", ReplyAction="http://tempuri.org/WCFMessageService/GetRecordsResponse")]
        System.IAsyncResult BeginGetRecords(int pageSize, int pageIndex, string sort, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.MessageService.Message> EndGetRecords(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface WCFMessageServiceChannel : ComponentArt.Silverlight.Demos.MessageService.WCFMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.MessageService.Message> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.MessageService.Message>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WCFMessageServiceClient : System.ServiceModel.ClientBase<ComponentArt.Silverlight.Demos.MessageService.WCFMessageService>, ComponentArt.Silverlight.Demos.MessageService.WCFMessageService {
        
        private BeginOperationDelegate onBeginGetRecordsDelegate;
        
        private EndOperationDelegate onEndGetRecordsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecordsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WCFMessageServiceClient() {
        }
        
        public WCFMessageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFMessageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFMessageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFMessageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetRecordsCompletedEventArgs> GetRecordsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ComponentArt.Silverlight.Demos.MessageService.WCFMessageService.BeginGetRecords(int pageSize, int pageIndex, string sort, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecords(pageSize, pageIndex, sort, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.MessageService.Message> ComponentArt.Silverlight.Demos.MessageService.WCFMessageService.EndGetRecords(System.IAsyncResult result) {
            return base.Channel.EndGetRecords(result);
        }
        
        private System.IAsyncResult OnBeginGetRecords(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageSize = ((int)(inValues[0]));
            int pageIndex = ((int)(inValues[1]));
            string sort = ((string)(inValues[2]));
            return ((ComponentArt.Silverlight.Demos.MessageService.WCFMessageService)(this)).BeginGetRecords(pageSize, pageIndex, sort, callback, asyncState);
        }
        
        private object[] OnEndGetRecords(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.MessageService.Message> retVal = ((ComponentArt.Silverlight.Demos.MessageService.WCFMessageService)(this)).EndGetRecords(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecordsCompleted(object state) {
            if ((this.GetRecordsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecordsCompleted(this, new GetRecordsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecordsAsync(int pageSize, int pageIndex, string sort) {
            this.GetRecordsAsync(pageSize, pageIndex, sort, null);
        }
        
        public void GetRecordsAsync(int pageSize, int pageIndex, string sort, object userState) {
            if ((this.onBeginGetRecordsDelegate == null)) {
                this.onBeginGetRecordsDelegate = new BeginOperationDelegate(this.OnBeginGetRecords);
            }
            if ((this.onEndGetRecordsDelegate == null)) {
                this.onEndGetRecordsDelegate = new EndOperationDelegate(this.OnEndGetRecords);
            }
            if ((this.onGetRecordsCompletedDelegate == null)) {
                this.onGetRecordsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecordsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecordsDelegate, new object[] {
                        pageSize,
                        pageIndex,
                        sort}, this.onEndGetRecordsDelegate, this.onGetRecordsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ComponentArt.Silverlight.Demos.MessageService.WCFMessageService CreateChannel() {
            return new WCFMessageServiceClientChannel(this);
        }
        
        private class WCFMessageServiceClientChannel : ChannelBase<ComponentArt.Silverlight.Demos.MessageService.WCFMessageService>, ComponentArt.Silverlight.Demos.MessageService.WCFMessageService {
            
            public WCFMessageServiceClientChannel(System.ServiceModel.ClientBase<ComponentArt.Silverlight.Demos.MessageService.WCFMessageService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetRecords(int pageSize, int pageIndex, string sort, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = pageSize;
                _args[1] = pageIndex;
                _args[2] = sort;
                System.IAsyncResult _result = base.BeginInvoke("GetRecords", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.MessageService.Message> EndGetRecords(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.MessageService.Message> _result = ((System.Collections.ObjectModel.ObservableCollection<ComponentArt.Silverlight.Demos.MessageService.Message>)(base.EndInvoke("GetRecords", _args, result)));
                return _result;
            }
        }
    }
}
